{
  "swagger": "2.0",
  "info": {
    "description": "The API documentation designed to back the cart project. Whole project is still under development.",
    "version": "1.0.0",
    "title": "Shop the API",
    "contact": {
      "email": "azc.aizichu@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "externalDocs": {
    "description": "Check out the cart project demo.",
    "url": "https://shop-zc.netlify.com/"
  },
  "host": "159.203.17.226:81",
  "basePath": "/v1",
  "tags": [
    {
      "name": "Product",
      "description": "Info about the products"
    },
    {
      "name": "User",
      "description": "Info about the users"
    },
    {
      "name": "Cart",
      "description": "Info about the cart"
    },
    {
      "name": "Shipment",
      "description": "Info about the shipment"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/ping": {
      "get": {
        "summary": "Check if the api is alive",
        "responses": {
          "200": {
            "description": "pong"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Add a new user to the platform",
        "description": "Add a new user to the platform",
        "operationId": "addUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object that needs to be added to the platform",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get the list of all users",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": ""
          },
          "404": {
            "description": "No existing users."
          },
          "405": {
            "description": ""
          }
        }
      }
    },
    "/users/{user_id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Finds user by id.",
        "description": "Find user by id.",
        "operationId": "findUserById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User id",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update user by id",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "available",
                "pending",
                "sold"
              ],
              "default": "available"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pet"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete User by id",
        "description": "Delete user according to Id",
        "operationId": "deleteUserById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "Status values that need to be considered for filter",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pet"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/users/{user_id}/uploadAvatar": {
      "post": {
        "tags": [
          "User"
        ],
        "deprecated": true,
        "summary": "Uploads user avatar",
        "description": "",
        "operationId": "uploadFile",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user that requires an avatart update.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "file to upload",
            "required": false,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get all product info.",
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Import info of a new product.",
        "description": "",
        "operationId": "placeOrder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Add a new product to the platform.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Invalid Product"
          }
        }
      }
    },
    "/products/{product_id}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get product by Id",
        "responses": {
          "200": {}
        }
      },
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Update all info of a product.",
        "responses": {
          "200": {}
        }
      },
      "patch": {
        "tags": [
          "Product"
        ],
        "summary": "Update partial info of a product.",
        "responses": {
          "200": {}
        }
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Delete product by id.",
        "responses": {
          "204": {}
        }
      }
    },
    "/products/{product_id}/product_review": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Add a customer review for a product.",
        "description": "",
        "operationId": "addProductReview",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProductReview"
            }
          },
          "400": {
            "description": "Invalid ProductReview"
          }
        }
      },
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get review of a product.",
        "description": "",
        "operationId": "getProductReview",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProductReview"
            }
          },
          "404": {
            "description": "No product review for this product."
          }
        }
      }
    },
    "/cart/{userId}": {
      "get": {
        "tags": [
          "Cart"
        ],
        "deprecated": true,
        "summary": "Find purchase order by ID",
        "description": "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions",
        "operationId": "getOrderById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of pet that needs to be fetched",
            "required": true,
            "type": "integer",
            "maximum": 10,
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Cart"
        ],
        "deprecated": true,
        "summary": "Clear all items from cart by cart id",
        "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "operationId": "clearCart",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user that needs to clear cart.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/shipments": {
      "get": {
        "deprecated": true,
        "summary": "Get the list of all shipments.",
        "tags": [
          "Shipment"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "post": {
        "deprecated": true,
        "summary": "Create a new note of shipment info.",
        "tags": [
          "Shipment"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/shipment/{shipment_id}": {
      "put": {
        "deprecated": true,
        "summary": "Update the status of a shipment log.",
        "tags": [
          "Shipment"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "deprecated": true,
        "summary": "Remove shipment log by id.",
        "tags": [
          "Shipment"
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/shipment/{shipment_id}/shipmentTrack": {
    }
  },
  "definitions": {
    "Order": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string",
          "description": "Order Status",
          "enum": [
            "placed",
            "approved",
            "delivered"
          ]
        },
        "complete": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "Item": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number"
        },
        "product_id": {
          "type": "number"
        },
        "order_id": {
          "type": "number"
        },
        "cart_id": {
          "type": "number"
        },
        "amount": {
          "type": "number"
        }
      }
    },
    "Cart": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number"
        },
        "user_id": {
          "type": "number"
        }
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Product": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "product_name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "price": {
          "type": "number"
        },
        "productd_at": {
          "type": "string"
        },
        "capacity": {
          "type": "number"
        },
        "category_id": {
          "type": "number"
        }
      }
    },
    "ProductReview": {
      "type": "object",
      "properties": {
        "rating": {
          "type": "number"
        },
        "review": {
          "type": "string"
        },
        "product_id": {
          "type": "number"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "avatar": {
          "type": "string"
        },
        "last_login": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "User Status"
        }
      }
    },
    "Address": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "street": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "zip_code": {
          "type": "string"
        },
        "user_id": {
          "type": "number"
        }
      }
    },
    "Shipment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number"
        },
        "order_id": {
          "type": "number"
        },
        "shipment_status": {
          "type": "string"
        }
      }
    },
    "ShipmentTrack": {
      "type": "object",
      "properties": {
        "shipment_date": {
          "type": "string"
        },
        "estimated_arrival": {
          "type": "string"
        },
        "track_number": {
          "type": "string"
        },
        "shipment_id": {
          "type": "string"
        }
      }
    }
  }
}